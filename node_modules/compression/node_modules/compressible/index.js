/*!
 * compressible
<<<<<<< HEAD
 * Copyright(c) 2013 Jonathan Ong
 * Copyright(c) 2014 Jeremiah Senkpiel
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict'

/**
 * Module dependencies.
 * @private
=======
 * Copyright(c) 2014 Jeremiah Senkpiel
 * MIT Licensed
 */

/**
 * Module dependencies.
>>>>>>> 577a2527b30699446785b62d07097a35f051d5ce
 */

var db = require('mime-db')

/**
<<<<<<< HEAD
 * Module variables.
 * @private
 */

var compressibleTypeRegExp = /^text\/|\+json$|\+text$|\+xml$/i
var extractTypeRegExp = /^\s*([^;\s]*)(?:;|\s|$)/

/**
 * Module exports.
 * @public
=======
 * Module exports.
>>>>>>> 577a2527b30699446785b62d07097a35f051d5ce
 */

module.exports = compressible

/**
 * Checks if a type is compressible.
 *
 * @param {string} type
 * @return {Boolean} compressible
<<<<<<< HEAD
 & @public
 */

function compressible(type) {
  if (!type || typeof type !== 'string') {
    return false
  }

  // strip parameters
  var match = extractTypeRegExp.exec(type)
  var mime = match && match[1].toLowerCase()
  var data = db[mime]

  if ((data && data.compressible) || compressibleTypeRegExp.test(mime)) {
    return true
  }

  return data
    ? data.compressible
    : undefined
=======
 */

function compressible(type) {
  if (!type || typeof type !== "string") return false

  // Strip charset
  var i = type.indexOf(';')
  if (~i) type = type.slice(0, i)

  // handle types that have capitals or excess space
  type = type.trim().toLowerCase()
  
  // attempt to look up from database; fallback to regex if not found
  var mime = db[type]
  return mime ? mime.compressible : /^text\/|\+json$|\+text$|\+xml$/.test(type)
>>>>>>> 577a2527b30699446785b62d07097a35f051d5ce
}
