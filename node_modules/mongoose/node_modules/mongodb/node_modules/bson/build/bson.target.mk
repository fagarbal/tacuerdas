# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := bson
DEFS_Debug := \
<<<<<<< HEAD
	'-DNODE_GYP_MODULE_NAME=bson' \
	'-D_DARWIN_USE_64_BIT_INODE=1' \
=======
>>>>>>> 577a2527b30699446785b62d07097a35f051d5ce
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION' \
	'-DDEBUG' \
	'-D_DEBUG'

# Flags passed to all source files.
CFLAGS_Debug := \
<<<<<<< HEAD
	-O0 \
	-gdwarf-2 \
	-mmacosx-version-min=10.5 \
	-arch x86_64 \
	-Wall \
	-Wendif-labels \
	-W \
	-Wno-unused-parameter

# Flags passed to only C files.
CFLAGS_C_Debug := \
	-fno-strict-aliasing

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-fno-rtti \
	-fno-threadsafe-statics \
	-fno-strict-aliasing

# Flags passed to only ObjC files.
CFLAGS_OBJC_Debug :=

# Flags passed to only ObjC++ files.
CFLAGS_OBJCC_Debug :=

INCS_Debug := \
	-I/Users/fabio/.node-gyp/0.12.7/src \
	-I/Users/fabio/.node-gyp/0.12.7/deps/uv/include \
	-I/Users/fabio/.node-gyp/0.12.7/deps/v8/include \
	-I$(srcdir)/node_modules/nan

DEFS_Release := \
	'-DNODE_GYP_MODULE_NAME=bson' \
	'-D_DARWIN_USE_64_BIT_INODE=1' \
=======
	-fPIC \
	-pthread \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-g \
	-O0

# Flags passed to only C files.
CFLAGS_C_Debug :=

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-fno-rtti

INCS_Debug := \
	-I/home/fabio/.node-gyp/0.11.14/src \
	-I/home/fabio/.node-gyp/0.11.14/deps/uv/include \
	-I/home/fabio/.node-gyp/0.11.14/deps/v8/include \
	-I$(srcdir)/node_modules/nan

DEFS_Release := \
>>>>>>> 577a2527b30699446785b62d07097a35f051d5ce
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION'

# Flags passed to all source files.
CFLAGS_Release := \
<<<<<<< HEAD
	-Os \
	-gdwarf-2 \
	-mmacosx-version-min=10.5 \
	-arch x86_64 \
	-Wall \
	-Wendif-labels \
	-W \
	-Wno-unused-parameter

# Flags passed to only C files.
CFLAGS_C_Release := \
	-fno-strict-aliasing

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-fno-rtti \
	-fno-threadsafe-statics \
	-fno-strict-aliasing

# Flags passed to only ObjC files.
CFLAGS_OBJC_Release :=

# Flags passed to only ObjC++ files.
CFLAGS_OBJCC_Release :=

INCS_Release := \
	-I/Users/fabio/.node-gyp/0.12.7/src \
	-I/Users/fabio/.node-gyp/0.12.7/deps/uv/include \
	-I/Users/fabio/.node-gyp/0.12.7/deps/v8/include \
=======
	-fPIC \
	-pthread \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-O3 \
	-ffunction-sections \
	-fdata-sections \
	-fno-tree-vrp \
	-fno-omit-frame-pointer

# Flags passed to only C files.
CFLAGS_C_Release :=

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-fno-rtti

INCS_Release := \
	-I/home/fabio/.node-gyp/0.11.14/src \
	-I/home/fabio/.node-gyp/0.11.14/deps/uv/include \
	-I/home/fabio/.node-gyp/0.11.14/deps/v8/include \
>>>>>>> 577a2527b30699446785b62d07097a35f051d5ce
	-I$(srcdir)/node_modules/nan

OBJS := \
	$(obj).target/$(TARGET)/ext/bson.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))
<<<<<<< HEAD
$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))
$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))
=======
>>>>>>> 577a2527b30699446785b62d07097a35f051d5ce

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
<<<<<<< HEAD
	-undefined dynamic_lookup \
	-Wl,-search_paths_first \
	-mmacosx-version-min=10.5 \
	-arch x86_64 \
	-L$(builddir)

LIBTOOLFLAGS_Debug := \
	-undefined dynamic_lookup \
	-Wl,-search_paths_first

LDFLAGS_Release := \
	-undefined dynamic_lookup \
	-Wl,-search_paths_first \
	-mmacosx-version-min=10.5 \
	-arch x86_64 \
	-L$(builddir)

LIBTOOLFLAGS_Release := \
	-undefined dynamic_lookup \
	-Wl,-search_paths_first

LIBS :=

$(builddir)/bson.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(builddir)/bson.node: LIBS := $(LIBS)
$(builddir)/bson.node: GYP_LIBTOOLFLAGS := $(LIBTOOLFLAGS_$(BUILDTYPE))
$(builddir)/bson.node: TOOLSET := $(TOOLSET)
$(builddir)/bson.node: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,solink_module)

all_deps += $(builddir)/bson.node
=======
	-pthread \
	-rdynamic

LDFLAGS_Release := \
	-pthread \
	-rdynamic

LIBS :=

$(obj).target/bson.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(obj).target/bson.node: LIBS := $(LIBS)
$(obj).target/bson.node: TOOLSET := $(TOOLSET)
$(obj).target/bson.node: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,solink_module)

all_deps += $(obj).target/bson.node
>>>>>>> 577a2527b30699446785b62d07097a35f051d5ce
# Add target alias
.PHONY: bson
bson: $(builddir)/bson.node

<<<<<<< HEAD
# Short alias for building this executable.
.PHONY: bson.node
bson.node: $(builddir)/bson.node
=======
# Copy this to the executable output path.
$(builddir)/bson.node: TOOLSET := $(TOOLSET)
$(builddir)/bson.node: $(obj).target/bson.node FORCE_DO_CMD
	$(call do_cmd,copy)

all_deps += $(builddir)/bson.node
# Short alias for building this executable.
.PHONY: bson.node
bson.node: $(obj).target/bson.node $(builddir)/bson.node
>>>>>>> 577a2527b30699446785b62d07097a35f051d5ce

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/bson.node

