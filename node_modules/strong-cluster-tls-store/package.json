{
  "name": "strong-cluster-tls-store",
  "version": "0.1.0",
  "description": "Implementation of TLS session store using node's native cluster messaging",
  "license": "MIT",
  "main": "index.js",
  "scripts": {
    "coverage": "mocha -r blanket -R html-cov > coverage.html",
    "test": "mocha --reporter spec",
    "benchmark": "node benchmark/tls-connect.js",
    "lint": "jshint *.js test lib benchmark"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/strongloop/strong-cluster-tls-store.git"
  },
  "author": {
    "name": "Miroslav Bajtos",
    "email": "miroslav@strongloop.com"
  },
  "peerDependencies": {
    "strong-store-cluster": "~0.1.0"
  },
  "devDependencies": {
    "strong-store-cluster": "latest",
    "mocha": "~1.9.0",
    "jshint": "~2.0.1",
    "blanket": "~1.1.4",
    "chai": "~1.7.2",
    "debug": "~0.7.2"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "readme": "# TLS Session Store for Cluster\n\n[![Build Status](https://travis-ci.org/strongloop/strong-cluster-tls-store.png?branch=master)](https://travis-ci.org/strongloop/strong-cluster-tls-store)\n[![NPM version](https://badge.fury.io/js/strong-cluster-tls-store.png)](http://badge.fury.io/js/strong-cluster-tls-store)\n\n## Overview\n\nStrong-cluster-tls-store is an implementation of TLS session store\nusing node's native cluster messaging. It provides an easy solution\nfor improving performance of node's TLS/HTTPS server running in a cluster.\n\nThe performance of your HTTPS/TLS cluster depends on many factors:\n* Node.js version (significant improvements were implemented to both TLS and\n  cluster modules in v0.11)\n* platform (windows/linux/etc.)\n* whether your clients support the SessionTicket TLS extension (RFC5077)\n* how often the same HTTPS connection is reused for multiple requests\n\nYou should therefore monitor the performance of your application and\nfind out yourself how much extra speed is gained in your specific\nscenario (if any at all).\nCheck out our product [StrongOps](http://nodefly.com) (formerly NodeFly)\nif you are looking for a great performance monitoring tool.\n\n## Usage\n\n### Installation\n\n```Shell\n$ npm install strong-cluster-tls-store\n```\n\n### Configuration - TLS server\n\n```javascript\nvar shareTlsSessions = require('strong-cluster-tls-store');\n\nif (cluster.isMaster) {\n  // Setup your master and fork workers.\n} else {\n  // Start a TLS server, configure it to share TLS sessions.\n  var tlsOpts = { /* configure certificates, etc. */ }\n  var server = tls.createServer(tlsOpts, connectionHandler);\n  shareTlsSessions(server);\n  server.listen(port);\n  // etc.\n}\n```\n\n### Configuration - HTTPS server\n\n`https.Server` implements the interface of `tls.Server`,\nthe code to configure session sharing is the same.\n\n```javascript\nvar shareTlsSessions = require('strong-cluster-tls-store');\n\nif (cluster.isMaster) {\n  // Setup your master and fork workers.\n} else {\n  // Start a TLS server, configure it to share TLS sessions.\n  var httpsOpts = { /* configure certificates, etc. */ }\n  var server = https.createServer(httpsOpts, requestHandler);\n  shareTlsSessions(server);\n  server.listen(port);\n  // etc.\n}\n```\n\n#### Connect and Express\n\nBoth connect and express require that a https server is created by the caller.\nSetting up of TLS session sharing follows the same pattern as for a plain HTTPS\nserver.\n\n```javascript\nvar express = require('express');\nvar shareTlsSessions = require('strong-cluster-tls-store');\n\nif (cluster.isMaster) {\n  // Setup your master and fork workers.\n} else {\n  // Start the server and configure it to share TLS sessions.\n\n  var app = express();\n  // configure the app\n\n  var httpsOpts = { /* configure certificates, etc. */ }\n  var server = https.createServer(httpsOpts, app);\n  shareTlsSessions(server);\n\n  server.listen(port);\n  // etc.\n}\n```\n\n### Multiple servers\n\nTo configure session sharing for multiple TLS/HTTPS servers, you have to\nassign a unique namespace to each server.\n\n```javascript\nshareTlsSessions(server1, 'server1');\nshareTlsSessions(server2, 'server2');\n```\n\n### Setting up the master process\n\nThe store requires that a shared-state server is running in the master process.\nThe server is initialized automatically when you require() this module\nfrom the master. In the case that your master and workers have separate source\nfiles, you must explicitly require this module in your master source file.\nOptionally, you can call `setup()` to make it more obvious why you are loading\na module that is not used anywhere else.\n\n```javascript\n// master.js\n\nvar cluster = require('cluster');\n// etc.\n\nrequire('strong-cluster-tls-store').setup();\n\n// configure your cluster\n// fork the workers\n// etc.\n```\n\n## Setting up the client\n\nTLS session resumption may not occur without client configuration.\nFor non-Node clients it is case-by-case. For example, many browsers attempt\nsession resumption by default.\n\nWith the Node.js client, session data from a successful connection must be\nexplicitly copied to `opts.session` when making a new connection.\n\n```javascript\nvar tls = require('tls');\n\nvar opts = {\n  port: 4433,\n  host: 'localhost'\n};\n\nvar initialConnection = tls.connect(opts, function() {\n  // save the TLS session\n  opts.session = this.getSession();\n\n  // talk to the other side, etc.\n});\n\nvar resumedConnection = tls.connect(opts, function() {\n  // talk to the other side, etc.\n});\n```\n\nUnfortunately as of Node.js v0.10.15 and v0.11.4, the HTTPS client does\nreuse TLS sessions by default and the API does not provide an easy way \nhow to enable it manually.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/strongloop/strong-cluster-tls-store/issues"
  },
  "_id": "strong-cluster-tls-store@0.1.0",
  "dist": {
    "shasum": "9e703b5194bea76b0c0191808077e7e7516cc26f",
    "tarball": "http://registry.npmjs.org/strong-cluster-tls-store/-/strong-cluster-tls-store-0.1.0.tgz"
  },
  "_from": "strong-cluster-tls-store@*",
  "_npmVersion": "1.3.2",
  "_npmUser": {
    "name": "bajtos",
    "email": "miro.bajtos@gmail.com"
  },
  "maintainers": [
    {
      "name": "bajtos",
      "email": "miro.bajtos@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "9e703b5194bea76b0c0191808077e7e7516cc26f",
  "_resolved": "https://registry.npmjs.org/strong-cluster-tls-store/-/strong-cluster-tls-store-0.1.0.tgz",
  "homepage": "https://github.com/strongloop/strong-cluster-tls-store#readme"
}
