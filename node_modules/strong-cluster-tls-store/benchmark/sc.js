var fs = require('fs');
var https = require('https');
var http = require('http');
var cluster = require('cluster');
var reuseTlsSessions = require('..');

if (cluster.isMaster) {
  cluster.fork();
  cluster.fork();
  cluster.fork();
  cluster.fork();
} else {
  var options = {
    cert: fs.readFileSync(require.resolve('../test/cert/server.crt'), 'utf8'),
    key: fs.readFileSync(require.resolve('../test/cert/server.key'), 'utf8'),
  };
  // var server = http.createServer(function(req, resp) {
  var server = https.createServer(options, function(req, resp) {
    resp.on('error', function(err) { console.log('resp:', err); });
    req.on('error', function(err) { console.log('req:', err); });
    resp.write('hello\n');
    resp.end();
    /*
    cleartextStream.on('error', function(err) { console.error('stream error', err); });
    cleartextStream.setEncoding('utf8');
    cleartextStream.write('hello\n');
    cleartextStream.end();
    */
  });
  server.listen(3000);
  server.on('listening', function() {
    workerPort =  server.address().port;
    console.log('listening on port 3000');
  });
  reuseTlsSessions(server);
  server.on('error', function(err) { console.error('server error', err); });
}
